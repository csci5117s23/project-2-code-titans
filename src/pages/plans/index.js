import React, { useState, useEffect } from "react";
import { useAuth } from "@clerk/nextjs";
import "bootstrap/dist/css/bootstrap.min.css";
import {
  getAllPlans,
  getSpecificPlannedExpenses,
  activatePlan,
  deletePlan,
} from "@/modules/Data";
import { Container, Row, Col, Button } from "react-bootstrap";
import { addPlan } from "@/modules/Data";
import Navigation from "@/components/Navigation";
import Head from "next/head";
import { useRouter } from "next/router";
import PlanCard from "@/components/PlanCard";
import Loader from "@/components/Loader";

export default function PlansPage() {
  const [plans, setNewPlans] = useState([]);
  const { isLoaded, userId, getToken } = useAuth();
  const [isLoading, setIsLoading] = useState(true);
  const [activation, setActivation] = useState(false);
  const router = useRouter();

  useEffect(() => {
    setIsLoading(true);
    const getTotalExp = async (plan) => {
      setIsLoading(true);
      return await getToken({ template: "codehooks" }).then(async (token) => {
        return await getSpecificPlannedExpenses(token, userId, plan._id).then(
          (res) => {
            let totalExp = 0;
            const nameToSpendingData = new Map();
            res.map((entry) => {
              if (nameToSpendingData.has(entry.name)) {
                nameToSpendingData.set(
                  entry.name,
                  nameToSpendingData.get(entry.name) + entry.amount
                );
              } else {
                nameToSpendingData.set(entry.name, entry.amount);
              }

              totalExp += parseFloat(entry.amount);
            });

            setIsLoading(false);
            return {
              totalExp: parseFloat(totalExp).toFixed(2),
              nameToSpendingData: nameToSpendingData,
            };
          }
        );
      });
    };

    const activate = async (id) => {
      setActivation(true);
      setIsLoading(true);
      const token = await getToken({ template: "codehooks" });
      await activatePlan(token, userId, id);
      setActivation(false);
      setIsLoading(false);
    };

    getToken({ template: "codehooks" }).then(async (token) => {
      const res = await getAllPlans(token, userId);

      if (res.length > 0) {
        setNewPlans(
          await Promise.all(
            res.map(async (plan) => {
              const { totalExp, nameToSpendingData } = await getTotalExp(plan);

              const planNames = Array.from(nameToSpendingData.keys());
              const spendingData = Array.from(nameToSpendingData.values());
              if (plan.inProgress) {
                await deletePlan(token, userId, plan._id);
                return <></>;
              } else
                return (
                  <Col xs={12} lg={6} xxl={4}>
                    <PlanCard
                      name={plan.name}
                      expenditure={totalExp}
                      labels={planNames}
                      spendingData={spendingData}
                      summaryData={"yeah and?"}
                      id={plan._id}
                      activeStatus={plan.isActive}
                      activate={activate}
                    />
                  </Col>
                );
            })
          )
        );
      }
      setIsLoading(false);
    });
  }, [router, isLoaded, activation]);

  if (!isLoaded)
    return (
      <>
        <div className="loader-container">
          <Loader />
        </div>
      </>
    );
  else if (isLoaded && !userId) router.push("/");
  else {
    return (
      <>
        {isLoading && (
          <div className="loader-container">
            <Loader />
          </div>
        )}
        <Head>
          <title>Current Plans</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/duckget-logo.png" />
        </Head>
        <Navigation />
        <Container className="mx-auto" style={{ marginTop: "30px" }}>
          <Row>{plans}</Row>
          <div className="d-flex justify-content-center align-items-center">
            <Button
              className="rounded-4 my-10"
              style={{
                width: "80%",
                height: "80px",
                backgroundColor: "#AAE0FF",
                border: "none",
                boxShadow: "0px 4px 4px rgba(0, 0, 0, 0.25)",
                marginBottom: "10px",
              }}
              onClick={async () => {
                const token = await getToken({ template: "codehooks" });
                const res = await addPlan(token, {
                  name: " ",
                  userId: userId,
                  location: "00000",
                  isActive: false,
                  inProgress: true,
                });
                router.push("/plans/" + res._id);
              }}
            >
              <h1>New Plan</h1>
            </Button>
          </div>
        </Container>
      </>
    );
  }
}
